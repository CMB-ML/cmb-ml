check_hydra_configs:  # No information needed here

make_noise_cache:
  assets_out:
    scale_cache:
      handler: HealpyMap
      path_template: "{root}/{dataset}/{working}{stage}/{freq}_noise_sd_map.fits"
  assets_in:
    deltabandpass: {stage: raw}
    noise_src_varmaps: {stage: raw}
  dir_name: Simulation_B_NoiseCache

make_sim_configs:
  assets_out:
    split_configs:
      handler: Config
      path_template: "{root}/{dataset}/{working}{stage}/{split}/split_config.yaml"
    components_config:
      handler: Config
      path_template: "{root}/{dataset}/{working}{stage}/{split}/{sim}/component_params.yaml"
      path_template_alt: "{root}/{dataset}/{working}{stage}/{split}/component_params.yaml"
  assets_in:
    wmap_chains: {stage: raw}
  splits: &all_splits
    - train
    - valid
    - test
  dir_name: Simulation_C_Configs
  make_stage_log: True

make_theory_ps:
  assets_out:
    cmb_ps:
      handler: CambPowerSpectrum
      path_template: "{root}/{dataset}/{working}{stage}/{split}/{sim}/cmb_ps_fid.txt"
      path_template_alt: "{root}/{dataset}/{working}{stage}/{split}/cmb_ps_fid.txt"
  assets_in:
    components_config: {stage: make_cosmo_configs}
  splits: *all_splits
  dir_name: Simulation_CMB_Power_Spectra
  make_stage_log: True

make_obs_no_noise:
  assets_out:
    cmb_map:
      handler: HealpyMap
      path_template: "{root}/{dataset}/{working}{stage}/{split}/{sim}/cmb_map_fid.fits"  # Changed for working dir while using separate noise
    sky_no_noise_maps:
      handler: HealpyMap
      path_template: "{root}/{dataset}/{working}{stage}/{split}/{sim}/sky_{freq}_no_noise_map.fits"  # Changed for working dir while using separate noise
    # noise_maps:  # Optional; see model.sim.noise.save_noise for flag to enable this. Removed for separate noise generation.
    #   handler: HealpyMap
    #   path_template: "{root}/{dataset}/{stage}/{split}/{sim}/noise_{freq}_map.fits"
  assets_in:
    deltabandpass: {stage: raw}
    # scale_cache: {stage: make_noise_cache}
    cmb_ps: {stage: make_theory_ps}
  splits: *all_splits
  dir_name: Simulation_D_Sky_Emission
  make_stage_log: True
  # top_level_working: True

make_noise:
  assets_out:
    noise_maps:  # Optional; see model.sim.noise.save_noise for flag to enable this
      handler: HealpyMap
      path_template: "{root}/{dataset}/{working}{stage}/{split}/{sim}/noise_{freq}_map.fits"
  assets_in:
    deltabandpass: {stage: raw}
    scale_cache: {stage: make_noise_cache}
    noise_model: {stage: make_noise_models}
    noise_avg:   {stage: make_planck_noise_sims_avgs}
  dir_name: Simulation_E_Noise
  splits: *all_splits
  make_stage_log: True

make_sims:
  assets_out:
    obs_maps:
      handler: HealpyMap
      path_template: "{root}/{dataset}/{stage}/{split}/{sim}/obs_{freq}_map.fits"
    cmb_map:
      handler: HealpyMap
      path_template: "{root}/{dataset}/{stage}/{split}/{sim}/cmb_map_fid.fits" 
  assets_in:
    deltabandpass: {stage: raw}
    noise_maps: {stage: make_noise}
    sky_no_noise_maps: {stage: make_obs_no_noise}
    cmb_map: {stage: make_obs_no_noise}
  dir_name: Simulation
  splits: *all_splits
  make_stage_log: True
  top_level_working: True

make_mask:
  assets_out:
    mask:
      handler: HealpyMap
      path_template: "{root}/{dataset}/{stage}/mask.fits"
    mask_sm:
      handler: HealpyMap
      path_template: "{root}/{dataset}/{stage}/mask_sm.fits"
  assets_in:
    mask: {stage: raw, orig_name: mask_src_map}
  dir_name: Simulation_Mask

download_sims:
  assets_out:
    temp_tar_dir:
      handler: EmptyHandler
      path_template: "{root}/{dataset}/{working}{stage}"
    dataset_dir:
      handler: EmptyHandler
      path_template: "{root}/{dataset}/"
  assets_in:
    deltabandpass: {stage: raw}
    shared_links: {stage: download_sims_reference}
  dir_name: Download_Sims_Working
  splits: *all_splits
  make_stage_log: True
  top_level_working: True
